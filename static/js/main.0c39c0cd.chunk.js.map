{"version":3,"sources":["MapChart.js","App.js","transform.js","serviceWorker.js","index.js"],"names":["offsets","VT","NH","MA","RI","CT","NJ","DE","MD","DC","memo","setTooltipContent","covid19Info","projection","data-tip","geography","geographies","map","geo","centroid","geoCentroid","cur","allstates","find","s","val","id","key","rsmKey","onMouseEnter","name","properties","myToolTipContent","console","log","onMouseLeave","style","default","fill","outline","hover","pressed","Object","keys","indexOf","coordinates","y","fontSize","textAnchor","subject","dx","dy","x","alignmentBaseline","App","useState","setCovid19Info","content","setContent","useEffect","fetch","then","result","json","stateInfoArray","ret","forEach","item","state","trim","groupByState","catch","error","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2rDAeMA,EAAU,CACZC,GAAI,CAAC,IAAK,GACVC,GAAI,CAAC,GAAI,GACTC,GAAI,CAAC,IAAK,GACVC,GAAI,CAAC,GAAI,GACTC,GAAI,CAAC,GAAI,IACTC,GAAI,CAAC,GAAI,GACTC,GAAI,CAAC,GAAI,GACTC,GAAI,CAAC,GAAI,IACTC,GAAI,CAAC,GAAI,KAgFEC,kBApEE,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,kBAAoBC,EAAiB,EAAjBA,YACtC,OACE,oCACE,kBAAC,gBAAD,CACEC,WAAW,eAAeC,WAAS,IAEjC,kBAAC,cAAD,CAAaC,UA7BR,4DA8BF,qBAAGC,YACUC,KAAI,SAAAC,GACd,IAAMC,EAAWC,YAAYF,GACvBG,EAAMC,EAAUC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,MAAQP,EAAIQ,MAC9C,OAAQ,oCAAE,kBAAC,YAAD,CACRC,IAAKT,EAAIU,OACTb,UAAWG,EACXW,aAAc,WAAO,IACXC,EAASZ,EAAIa,WAAbD,KACFE,EAAmBpB,EAAYkB,GACrCG,QAAQC,IAAIF,GACZrB,EAAkBqB,IAEpBG,aAAc,WACZxB,EAAkB,KAEpByB,MAAO,CACLC,QAAS,CACPC,KAAM,UACNC,QAAS,QAEXC,MAAO,CACLF,KAAM,OACNC,QAAS,QAEXE,QAAS,CACPH,KAAM,OACNC,QAAS,WAIf,uBAAGZ,IAAKT,EAAIU,OAAS,SAClBP,GACCF,EAAS,IAAM,KACfA,EAAS,IAAM,MAC4B,IAA1CuB,OAAOC,KAAK3C,GAAS4C,QAAQvB,EAAIK,IAChC,kBAAC,SAAD,CAAQmB,YAAa1B,GACnB,0BAAM2B,EAAE,IAAIC,SAAU,GAAIC,WAAW,UAClC3B,EAAIK,KAIT,kBAAC,aAAD,CACEuB,QAAS9B,EACT+B,GAAIlD,EAAQqB,EAAIK,IAAI,GACpByB,GAAInD,EAAQqB,EAAIK,IAAI,IAEpB,0BAAM0B,EAAG,EAAGL,SAAU,GAAIM,kBAAkB,UACzChC,EAAIK,mBCpDhB4B,MAjCf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACN3C,EADM,KACO4C,EADP,OAEiBD,mBAAS,IAF1B,mBAENE,EAFM,KAEGC,EAFH,KAcb,OAVAC,qBAAU,WAERC,MADY,mEAEXC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GACJN,ECfsB,SAACQ,GACzB,IAAMC,EAAM,GAIZ,OAHAD,EAAeE,SAAQ,SAAAC,GACnBF,EAAIE,EAAKC,MAAMC,QAAUF,KAEtBF,EDUUK,CAAaR,OAE7BS,OAAM,SAAAC,GAAK,OAAIvC,QAAQC,IAAIsC,QAC3B,IAGD,yBAAKC,UAAU,aACb,yBAAKA,UAAU,aACb,0DACA,mEAEF,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAU9D,kBAAmB+C,EAAY9C,YAAaA,IACtD,kBAAC,IAAD,KACE,oDAAsB6C,EAAO,QAC7B,oDAAsBA,EAAO,OAC7B,oDAAsBA,EAAO,QAC7B,oDAAsBA,EAAO,QAA7B,aEpBUiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdjB,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMiB,c","file":"static/js/main.0c39c0cd.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport { geoCentroid } from 'd3-geo';\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  Annotation\n} from \"react-simple-maps\";\n\nimport allstates from './data/allstates.json';\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst offsets = {\n    VT: [50, -8],\n    NH: [34, 2],\n    MA: [30, -1],\n    RI: [28, 2],\n    CT: [35, 10],\n    NJ: [34, 1],\n    DE: [33, 0],\n    MD: [47, 10],\n    DC: [49, 21]\n  };\n// const rounded = num => {\n//   if (num > 1000000000) {\n//     return Math.round(num / 100000000) / 10 + \"Bn\";\n//   } else if (num > 1000000) {\n//     return Math.round(num / 100000) / 10 + \"M\";\n//   } else {\n//     return Math.round(num / 100) / 10 + \"K\";\n//   }\n// };\n\nconst MapChart = ({ setTooltipContent , covid19Info}) => {\n  return (\n    <>\n      <ComposableMap\n        projection=\"geoAlbersUsa\" data-tip=\"\"\n      >\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => {\n                const centroid = geoCentroid(geo);\n                const cur = allstates.find(s => s.val === geo.id);\n                return (<><Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  onMouseEnter={() => {\n                    const { name } = geo.properties;\n                    const myToolTipContent = covid19Info[name];\n                    console.log(myToolTipContent);\n                    setTooltipContent(myToolTipContent);\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                  style={{\n                    default: {\n                      fill: \"#D6D6DA\",\n                      outline: \"none\"\n                    },\n                    hover: {\n                      fill: \"#F53\",\n                      outline: \"none\"\n                    },\n                    pressed: {\n                      fill: \"#E42\",\n                      outline: \"none\"\n                    }\n                  }}\n                />\n                <g key={geo.rsmKey + \"-name\"}>\n                  {cur &&\n                    centroid[0] > -160 &&\n                    centroid[0] < -67 &&\n                    (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                      <Marker coordinates={centroid}>\n                        <text y=\"2\" fontSize={14} textAnchor=\"middle\">\n                          {cur.id}\n                        </text>\n                      </Marker>\n                    ) : (\n                      <Annotation\n                        subject={centroid}\n                        dx={offsets[cur.id][0]}\n                        dy={offsets[cur.id][1]}\n                      >\n                        <text x={4} fontSize={14} alignmentBaseline=\"middle\">\n                          {cur.id}\n                        </text>\n                      </Annotation>\n                    ))}\n                </g></>);\n              })\n            }\n          </Geographies>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ReactTooltip from 'react-tooltip';\nimport MapChart from './MapChart';\nimport { groupByState } from './transform';\n\nfunction App() {\n  const [covid19Info, setCovid19Info] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  \n  useEffect(() => {\n    const url = 'https://finnhub.io/api/v1/covid19/us?token=bpvvt8nrh5rddd65degg';\n    fetch(url)\n    .then(result => result.json())\n    .then(result => {\n      setCovid19Info(groupByState(result));\n    })\n    .catch(error => console.log(error));\n  }, []);\n  \n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n        <h2>COVID-19 tracking by state</h2>\n        <h5>Hover over a state to display data</h5>\n      </div>\n      <div className='App'>\n        <MapChart setTooltipContent={setContent} covid19Info={covid19Info}/>\n        <ReactTooltip>\n          <p>{`State        : ${content['state']}`}</p>\n          <p>{`+Ve cases    : ${content['case']}`}</p>\n          <p>{`Deaths       : ${content['death']}`}</p>\n          <p>{`Last updated : ${content['updated']} EST`}</p>\n        </ReactTooltip>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const groupByState = (stateInfoArray) => {\n    const ret = {};\n    stateInfoArray.forEach(item => {\n        ret[item.state.trim()] = item;\n    });\n    return ret;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}